#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./my-css.css"/>
#+OPTIONS: toc:nil
#+AUTHOR: Nemo
#+email: nemonemo314@proton.me
#+TITLE: Derivação automática
#+SUBTITLE: Recap e aproximação por diferenças finitas
#+PROPERTY: header-args:scheme  :session chez-1 :output-dir "./results/data"
#+PROPERTY: header-args:gnuplot :output-dir "./results/img"
* Objetivos
Essa serie vai tentar explicar os conceitos e motivações por trás da
ideia conhecida por "derivação automática". Começaremos por uma revisão das
ideias básicas de calculo (de modo breve), veremos como "computar" aproximações
numéricas e expressões simbólicas da derivada de uma função, e as limitações e
problemas desses métodos. Finalmente então implementaremos uma pequena
biblioteca do que é conhecido por diferenciação automática "Forward mode".
** Nosso plano
 1. Introdução 
 2. Recap de calculo 
 3. Implementar diferenças finitas 
 4. (talvez) implementar diferenciação simbólica
 5. Base teorica do autodiff
 6. Implementação de autodiff
* Recapitulando: Derivação
O quanto uma função \(F(x) = y\), com \(x, y \subset \mathbb{R}\),
muda conforme \(x\) varia é chamado de derivada.

A velocidade é um exemplo claro de como a derivação representa a mudança.
Se a posição de um carro que se move é descrita por \(p(t)\), sua velocidade
vai ser a derivada da posição em função de \(t\) e sua aceleração a derivada da
derivada (a variação da variação), ou em "termos matemáticos":
\begin{equation}
Velocidade = v(t) = \frac{dp(t)}{dt}
\end{equation}
\begin{equation}
Aceleração = a(t) = \frac{dv(t)}{dt} = \frac{d^{2}p(t)}{d^{2}t}
\end{equation}

A derivada de função \(F(x)\) é formalmente definida utilizando limites:
\begin{equation}                     
\frac{dF(x)}{dt} =\lim_{h\to 0} \frac{F(x + h) - F(x)}{h} 
\end{equation}

Para uma função de uma dimensão, graficamente isso pode ser visto como tentar
encontrar a reta tangente a um ponto especifico, ou em outras palavras: uma
aproximação linear daquela função.
#+CAPTION: Derivada de \(F(x)\) com \(x=a\) e \(x=b\)
#+NAME:   fig:tan_line.png
[[./img/tangent_line.png]]

Utilizando as propriedades de limites é possível determinar o comportamento para
maioria das operações realizadas nos espaços "normais", é dai que vem as tabelas
de derivação. As tabelas de derivação apresentam um conjunto de *regras
simbólicas* para manipular essas expressões, como por exemplo as presentes na Tabela 1.


#+ATTR_LATEX: :placement [h] :center t :width \linewidth
#+ATTR_HTML: :border 2 :rules all :frame border
#+CAPTION: Algumas regras de derivação simbólica
|      Comentário       |    \(Expr\)     |   \(\frac{d(Expr)}{dx}\)    |                                    Exemplo                                    |
|          <c>          |       <c>       |             <c>             |                                      <c>                                      |
|-----------------------+-----------------+-----------------------------+-------------------------------------------------------------------------------|
|    Regra da adição    |   \(F \pm W\)   |        \(F' \pm W'\)        |            \(x^{3}-x^{2} \Rightarrow 3\cdot x^{2} - 2\cdot x^{}\)             |
|   Regra do produto    |    \(F * W\)    | \(F' \cdot W + W' \cdot F\) | \(e ^ {x} \cdot x^{2} \Rightarrow e^{x}\cdot x^{2} + 2\cdot x \cdot e^{x}  \) |
|    Regra da cadeia    |   \(F(W(x))\)   |  \(F'(G(x)) \cdot G'(x)\)   |         \(sin(x)\circ x^{2} \Rightarrow\ cos(x^{2}) \cdot 2 \cdot x\)         |
| Regra para reciproca  | \(\frac{1}{F}\) |    \(\frac{-F'}{F^{2}}\)    |                 \(\frac{1}{x} \Rightarrow -\frac{1}{x^{2}}\)                  |
| Regra para polinômios |   \(x ^ {n}\)   |    \(n \cdot x^{n - 1}\)    |                     \(x ^ {5} \Rightarrow 5 \cdot x^{4}\)                     |
|  Constantes, números  |        K        |              0              |                             \(42 \Rightarrow 0\)                              |
|        \cdots         |     \cdots      |           \cdots            |                                    \cdots                                     |
** Notação
Calculo possui uma historia um pouco complicada com notações. Existem varias, e
dependendo da situação convém usar uma ou outra. Todas são um pouco confusas.
A derivada de uma função \(F(x)\) pode ser representada:
 - Com um apóstrofo ou similar: \(F'(x)\)
 - Com um circulo sobre o nome da função: \(\dot F\)
 - Como um operador D(iferencial): \(D F(x)\)
 - Como uma especie de razão entre a função e um "infinitesimal": \( \frac{dF}
   {dx} \)
Quase todas podem ser estendidas para tratar de derivadas de ordem maior e/ou
derivadas parciais, que não cobriremos aqui.


Para saber mais:
    - Introdutório : https://www.youtube.com/watch?v=6v0SMTZ8hkU
    - Introdutório : Um Curso de Cálculo - Vol. 1, Hamilton Luiz Guidorizzi
    - Avançado / rigoroso : Calculus on Manifolds, Michael Spivak,  1965
      
** Diferenças finitas
Para de fato calcularmos essa função em um ponto utilizando computadores,
podemos utilizar uma aproximação. Isso é feito dando valores pequenos para \(h\)
em vez de usar um limite. Essa aproximação então é:
\begin{equation}                     
F'(x) \approx \frac{F(x + h) - F(x)}{h} \
\end{equation}
#+CAPTION: Aproximação por diferenças finitas "para frente" de \(F'(x)\).
#+NAME:   fig:forward.png
[[./img/forward.png]]
A equação anterior aproxima a derivada como um "passo" para frente, mas é
possível também aproximá-la como um passo para trás:
\begin{equation}                     
F'(x) \approx \frac{F(x) - F(x-h)}{h} \
\end{equation}
#+CAPTION: Aproximação por diferenças finitas "para trás" de \(F'(x)\).
#+NAME:   fig:forward.png
[[./img/backward.png]]
Ou meio passo para frente e meio para trás:
\begin{equation}                     
F'(x) \approx \frac{F(x + \frac{h}{2}) - F(x - \frac{h}{2})}{h} \
\end{equation}
#+CAPTION: Aproximação por diferenças finitas "centrada" de \(F'(x)\).
#+NAME:   fig:forward.png
[[./img/centered.png]]
As formulas que envolvem somente uma direção se comportam de modo similar em
precisão e estabilidade, mas a diferença "centrada" tem um erro menor.
** Implementação de diferenças finitas
Primeiramente convém definir algumas funções que vão nos auxiliar a extrair e
plotar os resultados.
*** Funções auxiliares
#+NAME: aux
#+begin_src  scheme :results none  :session chez-1   :hlines no
  (define (range from by to)
    ;; Função que gera um intervalo numerico de [from] em passos [by] até [to].
    (if (>= from to)
        '()
        (cons from (range (+ by from) by to))))

  (define (log10-range start end n-per-decade)
    ;; função que gera um intervalo de [n-per-decade] pontos espaçados de modo uniforme
    ;; em uma decada, em (- [decades] [start]) decadas.
    (let ([decades (range start 1 end)]
          [points (range 1 (/ 10 n-per-decade) 10)])
      (apply append
             (map (lambda (decade)
                    (map (lambda (point)  (* point (expt 10.0 decade))) points))
                  decades))))

  (define (relative-error a b)
    ;; calcula o erro relativo entre duas coisas. err = (abs (a - b) / b)
    (abs (/ (- a b) b)))


  (define (print-row-with-spaces lst)
    ;; imprime uma lista [lst] com seus elementos separados por " " e termina com \n.
    (format #t "~{~a~^ ~}~%" lst))

  (define (print-dataset . list-of-lists)
    ;; imprime o dataset todo
    (apply  for-each (lambda x (print-row-with-spaces x))  list-of-lists))
#+end_src
*** Função de exemplo
Para demonstrar as formas de se calcular a aproximação por diferenças finitas,
convém escolher uma função. Escolhi, por nenhuma razão especifica, utilizar um
seno amortecido:
\begin{equation}
\sin\left(x\right) \cdot e^{\frac{-x}{5}}
\end{equation}
Que tem como derivada:
\begin{equation}
-\frac{\mathrm{e}^{-\frac{x}{5}} \left(\sin\left(x\right) - 5 \cos\left(x\right)\right)}{5}
\end{equation}
Suas definições em scheme são representadas abaixo.
#+ATTR_LATEX: :float nil :options mathescape
#+begin_src scheme :results output none     
  (define (my-test-func x)
    ;; e^(-x/5) * sin(x)
    (* (sin x) (exp (/ (* -1 x) 5))))

  (define (my-test-derivative x)
    ;;-(e^(-x / 5) * (sin(x) - 5 * cos(x))) / 5
    (* -1 (/ (* (exp (/ (* -1 x) 5)) (- (sin x) (* 5 (cos x)))) 5)))

#+end_src
Os dois blocos de codigo abaixo gravam e leem os resultados dessa função e sua
derivada em um arquivo, e plotam o resultado para \([0,20]\). O processo de
escrita no arquivo *é realizada pelo org-mode* que executa o codigo scheme,
coleta a saida, e salva. Já a leitura e plotagem são feitas no gnuplot (voce
também pode usar python, R ou sua linguagem favorita para plotar).
#+NAME: dfunc
#+begin_src scheme :results output file silent  :file func-dfunc.csv 
  (let* ([dominio (range 0 0.5 20)]
         [plot-test-func  (map my-test-func dominio)]
         [plot-test-Dfunc (map my-test-derivative dominio)])
    (print-dataset dominio plot-test-func plot-test-Dfunc))
#+end_src


#+begin_src gnuplot  :var data="./results/data/func-dfunc.csv"  f=dfunc()  :output file :file func-e-deriv.png :exports both
  # Script gnuplot
  reset
  set title "Funcao {e^{-x/5}}  * {sin(x)} e sua derivada exata"
  set xlabel "x"
  #plota a as duas funções
  plot data u 1:2 w l title "f(x)", data u 1:3 w l  title "D f(x)"
#+end_src

#+RESULTS:
[[file:./results/img/func-e-deriv.png]]

O bloco abaixo plota a derivada aproximada, utilizando a aproximação "para frente",
para três valores de h: 1e-9,1e-12 e 1e-15. É possivel ver que a aproximação
para de funcionar para o menor valor, e se continuassemos a diminuir h ela quebraria completamente.

#+NAME: aprox
#+begin_src scheme :results output file silent  :file plot-aprox-d.csv 

  (define (aprox-d f h x)
      (/ (- (f (+ x h)) (f x)) h))

    (let* ([dominio (range 0 0.5 20)]
           [plot-exact-Dfunc (map my-test-derivative dominio)]
           [plot-aprox-Dfunc-e9  (map (lambda (x) (aprox-d my-test-func 1e-9 x)) dominio)]
           [plot-aprox-Dfunc-e12 (map (lambda (x) (aprox-d my-test-func 1e-12 x)) dominio)]
           [plot-aprox-Dfunc-e15 (map (lambda (x) (aprox-d my-test-func 1e-15 x)) dominio)])
      (print-dataset dominio plot-exact-Dfunc plot-aprox-Dfunc-e9 plot-aprox-Dfunc-e12 plot-aprox-Dfunc-e15))
#+end_src

#+begin_src gnuplot  :var data="./results/data/plot-aprox-d.csv"  f=aprox()  :output file :file aprox-and-exact.png :exports both
  # Script gnuplot
  reset

  set xlabel "x"
  set multiplot layout 2,2 columns
  #plota a as duas funções
  plot data u 1:2 w l title "Df exata(x)"
  plot data u 1:3 w l  title "Df(x) aproximada h=e-9"
  plot data u 1:4 w l  title "Df(x) aproximada h=e-12"
  plot data u 1:5 w l  title "Df(x) aproximada h=e-15"
  unset multiplot
#+end_src

#+RESULTS:
[[file:./results/img/aprox-and-exact.png]]

Para observar o comportamento do erro, em relação a derivada "ideal", convém selecionarmos
um ponto, neste caso \(x = 8\), e variarmos h e o tipo de aproximação. Os codigos abaixo fazem isso
para os três jeitos de aproximar que vimos anteriormente.

É possível observar que o erro relativo diminui de maneira linear para todos os três, até um certo ponto,
depois disso ele começa a subir de um jeito errático. Também é possível ver que o erro da aproximação
centrada é consideravelmente menor. O erro após a "quina" decorre de alguns fatores, mas principalmente
de arredondamento e de "formula" (pois é uma aproximação).
#+NAME: log-error
#+begin_src scheme :results output file   :file plot-log-error.csv 


  (define (aprox-d-centered f h x)
    (/ (- (f (+ x (/ h 2))) (f (- x (/ h 2)))) h))

  (let* ([dominio-h (log10-range -16 0 5)]
         [x 8]
         [derivada-em-x (my-test-derivative x)]
         [aproximacao-em-x (map (lambda (h) (aprox-d my-test-func h x)) dominio-h)]
         [aproximacao-em-x-centrada (map (lambda (h) (aprox-d-centered my-test-func h x)) dominio-h) ]
         [rel-error-f (map (lambda (i) (relative-error i derivada-em-x)) aproximacao-em-x)]
         [rel-error-c (map (lambda (i) (relative-error i derivada-em-x)) aproximacao-em-x-centrada)])
    (print-dataset dominio-h rel-error-f rel-error-c ))
#+end_src

#+RESULTS: log-error
[[file:./results/data/plot-log-error.csv]]



#+begin_src gnuplot  :var data="./results/data/plot-log-error.csv"  f=log-error()  :output file :file log-error.png :exports both
  # Script gnuplot
  reset
  set grid
  set xlabel "h"
  set ylabel "rel. error"
  set logscale x 10
  set logscale y 10
  set xrange reverse
  #plota a as duas funções
  plot data u 1:2 with line title "forward",\
       data u 1:3 with line title "centered" 
#+end_src

#+RESULTS:
[[file:./results/img/log-error.png]]

